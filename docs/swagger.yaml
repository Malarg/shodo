basePath: /api/v1
definitions:
  models.AddTaskRequest:
    properties:
      list_id:
        type: string
      task:
        $ref: '#/definitions/models.Task'
    type: object
  models.AuthTokens:
    properties:
      access:
        type: string
      refresh:
        type: string
    type: object
  models.EmptyResponse:
    type: object
  models.Error:
    properties:
      message:
        type: string
    type: object
  models.GetListsResponse:
    properties:
      lists:
        items:
          $ref: '#/definitions/models.TaskListShort'
        type: array
    type: object
  models.GetTaskListResponse:
    properties:
      list:
        $ref: '#/definitions/models.TaskList'
    type: object
  models.IdResponse:
    properties:
      id:
        type: string
    type: object
  models.LoginUserRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 32
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.RegisterUserRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 32
        minLength: 8
        type: string
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.RemoveTaskRequest:
    properties:
      list_id:
        type: string
      task_id:
        type: string
    required:
    - list_id
    - task_id
    type: object
  models.ShareListRequest:
    properties:
      email:
        type: string
      list_id:
        type: string
    required:
    - email
    - list_id
    type: object
  models.Task:
    properties:
      id:
        type: string
      title:
        type: string
    type: object
  models.TaskList:
    properties:
      id:
        type: string
      owner:
        type: string
      shared_with:
        items:
          type: string
        type: array
      tasks:
        items:
          $ref: '#/definitions/models.Task'
        type: array
      title:
        type: string
    type: object
  models.TaskListShort:
    properties:
      id:
        type: string
      owner:
        type: string
      title:
        type: string
    type: object
  models.UserShort:
    properties:
      email:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is methods declaration for Shodo API
  title: Shodo API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Log in user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthTokens'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
      summary: Log in user
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register new user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthTokens'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
      summary: Register new user
      tags:
      - auth
  /api/v1/list/:id:
    post:
      consumes:
      - application/json
      description: Get tasks by list id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetTaskListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get tasks by list id
      tags:
      - lists
  /api/v1/lists:
    get:
      consumes:
      - application/json
      description: Get all lists for a user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetListsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get all lists for a user
      tags:
      - lists
  /api/v1/share/start:
    post:
      consumes:
      - application/json
      description: Start share list with user
      parameters:
      - description: Share data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ShareListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
      summary: Start share list with user
      tags:
      - lists
  /api/v1/share/stop:
    post:
      consumes:
      - application/json
      description: Stop share list with user
      parameters:
      - description: Share data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ShareListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
      summary: Stop share list with user
      tags:
      - lists
  /api/v1/tasks/add:
    post:
      consumes:
      - application/json
      description: Add task to list
      parameters:
      - description: Task data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.AddTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.IdResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
      summary: Add task to list
      tags:
      - lists
  /api/v1/tasks/remove:
    post:
      consumes:
      - application/json
      description: Delete task from list
      parameters:
      - description: Task data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.RemoveTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
      summary: Delete task from list
      tags:
      - lists
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserShort'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get all users
      tags:
      - users
swagger: "2.0"
